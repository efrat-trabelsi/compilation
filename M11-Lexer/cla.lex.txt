%{
#define INT_NUM 300
#define FLOAT_NUM 301
#define ID 302

// keywords
#define BREAK 305
#define CASE 306
#define DEFAULT 307
#define ELSE 308
#define FLOAT 309
#define IF 310
#define INPUT 311
#define INT 312
#define OUTPUT 313
#define SWITCH 314
#define WHILE 315

// symbols
#define LEFT_PARENTHESIS 320
#define RIGHT_PARENTHESIS 321
#define LEFT_BRACKET 322
#define RIGHT_BRACKET 323
#define COMMA 324
#define COLON 325
#define SEMICOLON 326
#define EQUAL 327

// operators
#define RELOP 330
#define ADDOP 331
#define MULOP 332
#define OR 333
#define AND 334
#define NOT 335
#define CAST 336

enum operator {PLUS, MINUS, MUL, DIV, EQ, NE, LT, GT, GE, LE };

union {
  int ival;
  float fval;
  char name [30];
  enum operator op;
} yylval;

#include <stdlib.h>

extern int atoi(const char *);
extern double atof(const char *);
%}

%option noyywrap

%option yylineno  // use this var!!!

%x STAR_COMMENT

%%

[0-9]+			{ yylval.ival = atoi(yytext); return INT_NUM; }
[0-9]+\.[0-9]+	{ yylval.fval = atof(yytext); return FLOAT_NUM; }

"break"		{ return BREAK; }
"case"		{ return CASE; }
"default"	{ return DEFAULT; }
"else"		{ return ELSE; }
"float"		{ return FLOAT; }
"if"		{ return IF; }
"input"		{ return INPUT; }
"int"		{ return INT; }
"output"	{ return OUTPUT; }
"switch"	{ return SWITCH; }
"while"		{ return WHILE;}

//???
"("		{ return LEFT_PARENTHESIS;}		// { return '(';}
")"		{ return RIGHT_PARENTHESIS;}	// { return ')';}
"{"		{ return LEFT_BRACKET;}			// { return '{';}
"}"		{ return RIGHT_BRACKET;}		// { return '}';}
","		{ return COMMA;}				// { return ',';}
":"		{ return COLON;}				// { return ':';}
";"		{ return SEMICOLON;}			// { return ';';}
"="		{ return EQUAL;}				// { return '=';}

[a-zA-Z][a-zA-Z0-9]*	{ strcpy(yylval.name, yytext); return ID; }

"=="	{ yylval.op = EQ; return RELOP; }
"!="	{ yylval.op = NE; return RELOP; }
"<"		{ yylval.op = LT; return RELOP; }
">"		{ yylval.op = GT; return RELOP; }
">="	{ yylval.op = GE; return RELOP; }
"<="	{ yylval.op = LE; return RELOP; }
"+"		{ yylval.op = PLUS;	return ADDOP; }
"-"		{ yylval.op = MINUS; return ADDOP; }
"*"		{ yylval.op = MUL; return MULOP; }
"/"		{ yylval.op = DIV; return MULOP; }
"||"	{ return OR; }
"&&"	{ return AND; }
"!"		{ return NOT; }

"cast<int>"		{ yylval. = ??; return CAST; }  //??? how to save the semantic value?
"cast<float>"	{ yylval. = ??; return CAST; }

[\t\r ]+  { /* skip white space */ }

[\n]+       { line += yyleng; /* line += strlen(yytext); */ }
 				
"/*"  { BEGIN(STAR_COMMENT); }
<STAR_COMMENT>{
[^*\n]+		{ /* skip chars in comment */ }
\n     		{ line++; }
"*"			{ /* skip a '*'. (if the '*' is followed by a slash -- the next rule will handle it) */ } 
"*/"		{ BEGIN(0); }
} // end STAR_COMMENT

.		{ printf ("line %d: unrecognized token %c(%x)\n", 
                               line, yytext[0], yytext[0]); }

%%

int main (int argc, char **argv)
{
   extern FILE *yyin;
   int token;

   if (argc != 2) {
      printf("Usage: %s <input file name>\n", argv[0]);
      exit(1);
   }

   yyin = fopen(argv[1], "r");
   
   while (token = lexer()) != 0)
   {
		printf ("TOKEN  : %s\n", yylval.name);
		switch (token) {
			case INT_NUM:
				printf("INTEGER NUMBER: %d\n", yylval.ival);
				break;
			case FLOAT_NUM:
				printf("FLOAT NUMBER: %f\n", yylval.fval);
				break;
			case ID:
				printf("ID: %s\n", yylval.name);
				break;
			case BREAK:
				printf("BREAK\n");
				break;
			case CASE:
				printf("CASE\n");
				break;
			case DEFAULT:
				printf("DEFAULT\n");
				break;
			case ELSE:
				printf("ELSE\n");
				break;
			case FLOAT:
				printf("FLOAT\n");
				break;
			case IF:
				printf("IF\n");
				break;
			case INPUT:
				printf("INPUT\n");
				break;
			case INT:
				printf("INT\n");
				break;
			case OUTPUT:
				printf("OUTPUT\n");
				break;
			case SWITCH:
				printf("SWITCH\n");
				break;
			case WHILE:
				printf("WHILE\n");
				break;
			
			case RELOP:
				printf("RELOP: %s\n", yylval.op);  //check it!
				break;
			case :
				printf("");
				break;
			case :
				printf("");
				break;
			case :
				printf("");
				break;
			default:
				printf("ERROR: unrecognized character\n");
				exit(1);
		}
		fclose(yyin);
		exit(0);
   }
}

